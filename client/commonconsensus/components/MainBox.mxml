<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:cc="commonconsensus.components.*"
    paddingLeft="5"
    paddingRight="5"
    paddingBottom="5"
    width="100%"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
    height="100%"
	color="#000000" 
	creationComplete="handleCreationComplete()"
	paddingTop="5" 
	headerHeight="5">
	
	
<mx:Script>
<![CDATA[
    import com.adobe.utils.DateUtil;
    
    import flash.events.TimerEvent;
    import flash.utils.Timer;
    
    import mx.collections.ArrayCollection;
    import mx.rpc.events.ResultEvent;
    
    import commonconsensus.events.FlagQuestionEvent;
    import commonconsensus.util.Settings;
    	
	public const SECONDS_FOR_ANSWER:uint = 8;		
	public const GAME_LENGTH:uint = 35;
    private var _timer:Timer = new Timer(1000);  //msec
    
    
    [Bindable]
    public var user : Object;
    
	[Bindable]
	public var game: Object;
	
	[Bindable]
	private var _timeLeft:int;
	


	public function handleCreationComplete():void {
	
		questionRoundView.guess.setFocus();
		setUpNewGame();
		_timer.addEventListener(TimerEvent.TIMER, updateTimeLeft);
		_timer.start();
	
	}
	
	
	public function updateTimeLeft(e:TimerEvent):void {
		_timeLeft -=1; //decrement counter
		//CommonConsensus.debug("Update Time Left: "+_timeLeft);
		if (_timeLeft > SECONDS_FOR_ANSWER) {
			// question round
			if (_timeLeft%5 == 0) {
				svcCheckup.send({username: user.username.toString(),
					user_key: user.key.toString(),
					game_key: game.key.toString()});
			}
			questionRoundView.timeLeft = _timeLeft-SECONDS_FOR_ANSWER;
			this.mainViewStack.selectedIndex = 0;
		} else  if (_timeLeft < 0) {
			// network delay -- keep trying.
			svcCheckup.send({username: user.username.toString(),
				user_key: user.key.toString(),
				game_key: game.key.toString()});
			
		} else {
			// answer round
			if (_timeLeft == SECONDS_FOR_ANSWER) {
				answerRoundView.updateScore();
				questionRoundView.guess.text = "";
			}
			questionRoundView.guess.setFocus();
			this.mainViewStack.selectedIndex = 1;
		}

	}
	
	private function setUpNewGame():void {
		
		questionRoundView.label="";
		if (answerRoundView.initialized) {
			answerRoundView.scoreText0.visible=false;
			answerRoundView.scoreText1.visible=false;
			answerRoundView.scoreText2.visible=false;
		}
	
		if (game.question.toString() != "RESTART") {
		
			var start:uint = Date.parse(game.game_start.toString());
			var now:uint = Date.parse(game.server_time.toString());
			_timeLeft = (start + (GAME_LENGTH*1000) - now) / 1000
        	questionRoundView.resultArray = new ArrayCollection();
      		this.mainViewStack.selectedIndex = 0;
      		questionRoundView.game = game;
      		answerRoundView.question = game.question;
      		questionRoundView.bgColor = game.background_color;
  		}
	}

    private function handleCheckup(event:ResultEvent):void {

    	CommonConsensus.debug("handleCheckup(): "+event.result.toString());	
    	var result:Object = JSON.parse(event.result.toString());

        var new_game:Object = result.game;// as Object;
		
		
        if (new_game.game_start != game.game_start) {
        	// new game starting
        	if (new_game.question.toString() == "RESTART") {
        		questionRoundView.game.question = "<i>Retrieving next question...</i>";
        		svcCheckup.send({username: user.username.toString(),
					user_key: user.key.toString(),
					game_key: game.key.toString()});
        	} else {
        		game = new_game;
        		setUpNewGame();
        	}
        } else {
			// existing game
			
			// synchronize time left
			var start:uint = Date.parse(result.game.game_start.toString());
			var now:uint = Date.parse(result.game.server_time.toString());
			_timeLeft = (start + (GAME_LENGTH*1000) - now) / 1000
		
        	var resultArray:ArrayCollection=new ArrayCollection()
			for (var answer:String in result.counts) {
				resultArray.addItem({answer: answer, count: result.counts[answer]});
			}
			questionRoundView.resultArray = resultArray;
        	questionRoundView.peoplePlaying = result.game.players.toString();
       }
	
    }


	private function handleFlagQuestion(event:FlagQuestionEvent):void {
        var new_game:Object = event.game;

        if (new_game.game_start != game.game_start) {
        	this.mainViewStack.selectedIndex=2;
        	// new game starting
        	CommonConsensus.debug("NEW GAME QUESTION = "+new_game.question.toString());
        	if (new_game.question.toString() == "RESTART") {
        		questionRoundView.game.question = "<i>Retrieving next question...</i>";
        		svcCheckup.send({username: user.username.toString(),
					user_key: user.key.toString(),
					game_key: game.key.toString()});
        	} else { 
        		game = new_game;
        		setUpNewGame();
        	}
        } else {
        	// old game, continue with flag
        	questionRoundView.resultArray = event.score.scores.children();
        	questionRoundView.peoplePlaying = event.score.people_playing.toString();
        } 
    }
    
]]>
</mx:Script>

   <mx:HTTPService
        id="svcCheckup"
        url="{Settings.BASE_URL}/flexserver/checkup/"
        resultFormat="e4x"
		method="POST"
        result="handleCheckup(event)"/>
	
	<mx:ViewStack id="mainViewStack" selectedIndex="0" width="800" height="600"  horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<cc:QuestionRound id="questionRoundView" game="{game}" user="{user}" timeLeft="{_timeLeft}" flagQuestion="handleFlagQuestion(event)" height="600"  horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
		<cc:AnswerRound id="answerRoundView" game="{game}" user="{user}" timeLeft="{_timeLeft}" horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
		<!--<cc:SwitchingGame id="switchingGameView"  horizontalScrollPolicy="off" verticalScrollPolicy="off"/>-->
	</mx:ViewStack>


</mx:Panel>