<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:cc="commonconsensus.components.*"
    paddingLeft="5"
    paddingRight="5"
    paddingBottom="5"
    width="100%"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
    height="100%"
	color="#000000" 
	themeColor="#636363" 
	creationComplete="handleCreationComplete()" paddingTop="5" borderThicknessTop="0" headerHeight="5">
	
	
<mx:Script>
<![CDATA[
    import mx.rpc.events.ResultEvent;
    import mx.collections.ArrayCollection;
    import mx.collections.IViewCursor;
    import mx.collections.XMLListCollection;
    
	
	import com.adobe.serialization.json.JSON;
    import flash.utils.Timer;		
    import flash.events.TimerEvent;
  	import commonconsensus.events.FlagQuestionEvent;  
	import commonconsensus.util.Settings;
    	
	public const SECONDS_FOR_ANSWER:uint = 5;		
	public const GAME_LENGTH:uint = 26;
    private var _timer:Timer = new Timer(1000);  //msec
    
    
    [Bindable]
    public var user : Object;
    
	[Bindable]
	public var game: Object;
	
	[Bindable]
	private var _timeLeft:int;
	
	//url="http://xoth.media.mit.edu:3000/checkup.xml"
	private var colors:Array =  [0x3B5959, 0x7F8CF1, 0xF2F2E9, 0xD9C4B8, 0xBF6363, 0x044E7F, 0x75B809, 0x117820, 0xFFE240];
	

	public function handleCreationComplete():void {
	
		questionRoundView.guess.setFocus();
		setUpNewGame();
		_timer.addEventListener(TimerEvent.TIMER, updateTimeLeft);
		_timer.start();
	
	}
	
	
	public function updateTimeLeft(e:TimerEvent):void {
		_timeLeft -=1; //decrement counter
		//CommonConsensus.debug("Update Time Left: "+_timeLeft);
		if (_timeLeft > SECONDS_FOR_ANSWER) {
			// question round
			if (_timeLeft%3 == 0) {
				svcCheckup.send();
			}
			questionRoundView.timeLeft = _timeLeft-SECONDS_FOR_ANSWER;
			this.mainViewStack.selectedIndex = 0;
		} else  if (_timeLeft < 0) {
			// network delay -- keep trying.
			svcCheckup.send();
			
		} else {
			// answer round
			if (_timeLeft == SECONDS_FOR_ANSWER) {
				answerRoundView.updateScore();
				questionRoundView.guess.text = "";
			}
			questionRoundView.guess.setFocus();
			this.mainViewStack.selectedIndex = 1;
		}

	}
	
	private function setUpNewGame():void {
		
		questionRoundView.label="";
		if (answerRoundView.initialized) {
			answerRoundView.scoreText0.visible=false;
			answerRoundView.scoreText1.visible=false;
			answerRoundView.scoreText2.visible=false;
		}
		//CommonConsensus.debug("Color: "+ (game.relation_type_id % colors.length));
		if (game.question.toString() != "RESTART") {
			//CommonConsensus.debug("in if for restarting: ");
			//CommonConsensus.debug("Question within main box: "+game["question"].toString());
			//CommonConsensus.debug("set up new game: "+(uint(game.start)-uint(game.now)));
			_timeLeft= (uint(game.start)+GAME_LENGTH)-uint(game["now"]);
        	questionRoundView.resultArray = new ArrayCollection();
      		this.mainViewStack.selectedIndex = 0;
      		questionRoundView.game = game;
      		answerRoundView.question = game.question;
      		//CommonConsensus.debug("Color: "+ (game.relation_type_id % colors.length));
      		questionRoundView.bgColor = colors[game.relation_type_id % colors.length];
      		
      		//CommonConsensus.debug("newGameSetup "+game.question);
  		}
	}

    private function handleCheckup(event:ResultEvent):void {
    	//CommonConsensus.debug("handleCheckup(): "+event.result.toString());	
    	var result:Object = JSON.decode(event.result.toString()) as Object;
        var new_game:Object = JSON.decode(""+result.game) as Object;

        if (new_game.start != game.start) {
        	// new game starting
        	if (new_game.question.toString() == "RESTART") {
        		questionRoundView.game.question = "<i>Retrieving next question...</i>";
        		svcCheckup.send();
        	} else {
        		game = new_game;
        		setUpNewGame();
        	}
        } else {
        	// old game, continue with flag
        	//CommonConsensus.debug("in mainbox "+event.result.toString())
        	var resultAr:ArrayCollection=new ArrayCollection()
		    for each ( var ite:Object in result.score.scores){
					CommonConsensus.debug("answer: "+ite.answer+"  score: "+ite.score);
					resultAr.addItem(Object(ite));
					trace(ite);
			}
			CommonConsensus.debug("length of result array "+resultAr.length)
        	questionRoundView.resultArray = resultAr;
        	questionRoundView.peoplePlaying = result.score.people_playing.toString();
       }
    }


	private function handleFlagQuestion(event:FlagQuestionEvent):void {
        var new_game:Object = event.game;
      	CommonConsensus.debug("handleFlagQuestion oldgame="+game["start"]+"  new-game="+new_game.start);

        if (new_game.start != game.start) {
        	this.mainViewStack.selectedIndex=2;
        	// new game starting
        	CommonConsensus.debug("NEW GAME QUESTION = "+new_game.question.toString());
        	if (new_game.question.toString() == "RESTART") {
        		questionRoundView.game.question = "<i>Retrieving next question...</i>";
        		svcCheckup.send();
        	} else { 
        		game = new_game;
        		setUpNewGame();
        	}
        } else {
        	// old game, continue with flag
        	questionRoundView.resultArray = event.score.scores.children();
        	questionRoundView.peoplePlaying = event.score.people_playing.toString();
        } 
    }
    
]]>
</mx:Script>

   <mx:HTTPService
        id="svcCheckup"
        url="{Settings.BASE_URL}/flexserver/checkup/"
        resultFormat="e4x"
        result="handleCheckup(event)"/>
	
	<mx:ViewStack id="mainViewStack" selectedIndex="0" width="800" height="600"  horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<cc:QuestionRound id="questionRoundView" game="{game}" user="{user}" timeLeft="{_timeLeft}" flagQuestion="handleFlagQuestion(event)" height="600"  horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
		<cc:AnswerRound id="answerRoundView"  horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
		<!--<cc:SwitchingGame id="switchingGameView"  horizontalScrollPolicy="off" verticalScrollPolicy="off"/>-->
	</mx:ViewStack>


</mx:Panel>